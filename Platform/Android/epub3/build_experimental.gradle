apply plugin: 'com.android.model.native'

def ndk_skipX86 = (rootProject.hasProperty("readium_ndk_skipX86") && rootProject.readium_ndk_skipX86)
def ndk_skipARM = (rootProject.hasProperty("readium_ndk_skipARM") && rootProject.readium_ndk_skipARM)
def ndk_clang = (rootProject.hasProperty("readium_ndk_clang") && rootProject.readium_ndk_clang)
def ndk_experimental = (rootProject.hasProperty("readium_ndk_experimental") && rootProject.readium_ndk_experimental)

println "[[${project.name}]] (EPUB3) Gradle Experimental: ${ndk_experimental}"
println "[[${project.name}]] (EPUB3) Skip ARM: ${ndk_skipARM}"
println "[[${project.name}]] (EPUB3) Skip x86: ${ndk_skipX86}"
println "[[${project.name}]] (EPUB3) Clang: ${ndk_clang}"

// Retrieve ndk dir
Properties properties = new Properties()
properties.load(rootProject.file('local.properties').newDataInputStream())
def ndkDir = properties.getProperty('ndk.dir', "").toString().replaceAll("\\\\", "/")
println "[[${project.name}]] (EPUB3) ndkDir: ${ndkDir}"

def ndkDirIncludes = "${ndkDir}/sysroot/usr/include"
println "[[${project.name}]] (EPUB3) ndkDirIncludes: ${ndkDirIncludes}"

// armeabi-v7a
def ndkDirIncludesASM_ARM = "${ndkDirIncludes}/arm-linux-androideabi"
println "[[${project.name}]] (EPUB3) ndkDirIncludesASM_ARM: ${ndkDirIncludesASM_ARM}"

// arm64-v8a
def ndkDirIncludesASM_ARM64 = "${ndkDirIncludes}/aarch64-linux-android"
println "[[${project.name}]] (EPUB3) ndkDirIncludesASM_ARM64: ${ndkDirIncludesASM_ARM64}"

// x86
def ndkDirIncludesASM_X86 = "${ndkDirIncludes}/x86_64-linux-android"
println "[[${project.name}]] (EPUB3) ndkDirIncludesASM_X86: ${ndkDirIncludesASM_X86}"

model {
//    repositories {
//        libs(PrebuiltLibraries) {
//            //${buildType.name}
//            //def os = targetPlatform.operatingSystem
//            def baseDir = "../../../ePub3/ThirdParty/icu4c/lib/"
//            def headersDir = "${file("./include/icu4c")}".toString()
//
//            libicuuc {
//                headers.srcDir "${headersDir}"
//                binaries.withType(StaticLibraryBinary) {
//                    staticLibraryFile = file("${baseDir}${targetPlatform.getName()}/libicuuc.a")
//                }
//            }
//            libicui18n {
//                headers.srcDir "${headersDir}"
//                binaries.withType(StaticLibraryBinary) {
//                    staticLibraryFile = file("${baseDir}${targetPlatform.getName()}/libicui18n.a")
//                }
//            }
//            libicuio {
//                headers.srcDir "${headersDir}"
//                binaries.withType(StaticLibraryBinary) {
//                    staticLibraryFile = file("${baseDir}${targetPlatform.getName()}/libicuio.a")
//                }
//            }
//            libicudata {
//                headers.srcDir "${headersDir}"
//                binaries.withType(StaticLibraryBinary) {
//                    staticLibraryFile = file("${baseDir}${targetPlatform.getName()}/libicudata.a")
//                }
//            }
//        }
//    }

    android {
        compileSdkVersion = 28
        buildToolsVersion = "28.0.3"
        sources {
            main {
                jni {
                    source {
                        srcDirs = [
                                './src/main/jni',
                                './src/main/jni/jni',
                                '../../../ePub3'
                        ]

                        excludes.add('ThirdParty/google-url/base/logging.*')
                        excludes.add('ThirdParty/google-url/base/ios_get_progname.*')
                        excludes.add('ThirdParty/google-url/src/gurl_test_main.*')
                        excludes.add('ThirdParty/google-url/src/gurl_unittest.*')
                        excludes.add('ThirdParty/google-url/src/url_canon_icu.*')
                        excludes.add('ThirdParty/google-url/src/url_canon_unittest.*')
                        excludes.add('ThirdParty/google-url/src/url_parse_unittest.*')
                        excludes.add('ThirdParty/google-url/src/url_util_unittest.*')

                        excludes.add('ThirdParty/libxml2-android/xmllint.*')
                        excludes.add('ThirdParty/libxml2-android/trionan.*')
                        excludes.add('ThirdParty/libxml2-android/xmlcatalog.*')

                        excludes.add('ThirdParty/utf8-cpp/**/*.*')

                        excludes.add('utilities/CPUCacheUtils*.*')
                        excludes.add('utilities/error_lookup_table.*')
                        excludes.add('utilities/Library.*')
                        excludes.add('utilities/ref_counted.*')
                        excludes.add('utilities/run_loop_cf.*')
                        excludes.add('utilities/run_loop_common.*')
                        excludes.add('utilities/run_loop_generic.*')
                        excludes.add('utilities/run_loop_windows.*')

                        excludes.add('xml/utilities/io_win.*')
                        excludes.add('xml/utilities/xml_bridge_dtrace_probes.*')
                        excludes.add('xml/tree/document_win.*')
                        excludes.add('xml/tree/element_win.*')
                        excludes.add('xml/tree/node_win.*')
                        excludes.add('xml/tree/xpath_win.*')

                    } //source

                    exportedHeaders {
                        srcDir "./src/main/jni"
                        srcDir "./include"
                    }

//                    dependencies {
//                        library "libicuuc" linkage "static"
//                        library "libicui18n" linkage "static"
//                        library "libicuio" linkage "static"
//                        library "libicudata" linkage "static"
//                    }
                } //jni
            } //main
        } //sources

        ndk {
            moduleName = "epub3"

            //arguments "-j 4" //Runtime.runtime.availableProcessors()

            toolchain = ndk_clang ? "clang" : "gcc"
            toolchainVersion = ndk_clang ? "" : "4.9" //https://github.com/android-ndk/ndk/issues/229

            def clangWithGnuStl = false

            if (!ndk_clang || clangWithGnuStl)
                stl = "gnustl_shared"
            else
                stl = "c++_shared"

            def arrayFlags = [
                // "-J6",
                "-fexceptions",
                "-DBUILDING_EPUB3",
//                "-DLIBXML_ICU_ENABLED",
                (ndk_clang && clangWithGnuStl) ? "-DCLANG_WITH_GNUSTL" : "-DREADIUM_GCC",
                ndk_clang ? "-D_LIBCPP_INLINE_VISIBILITY_EXCEPT_GCC49=_LIBCPP_INLINE_VISIBILITY" : "-DREADIUM_GCC",
                "-I../prefix.h",
                "-I${ndkDirIncludes}".toString(),
                "-I${file("./include")}".toString(),
                "-I${file("./include/ePub3")}".toString(),
                "-I${file("./include/ePub3/utilities")}".toString(),
                "-I${file("./include/ePub3/xml")}".toString()
//                "-I${file("./include/icu4c")}".toString()
            ]

            def arrayFlagsCPP = [
                "-fpermissive",
                "-frtti"
            ]

            cppFlags.addAll(arrayFlags)
            cppFlags.addAll(arrayFlagsCPP)
            cppFlags.add((!ndk_clang || clangWithGnuStl) ? "-std=gnu++11" : "-std=c++11")

            CFlags.addAll(arrayFlags)
            CFlags.add((!ndk_clang || clangWithGnuStl) ? "-std=gnu11" : "-std=c11")

            ldLibs.addAll(['z', 'android', 'log',
            //               'icuuc', 'icui18n', 'icuio', 'icudata'
            ])
            if (ndk_clang) ldLibs.addAll(['atomic'])
        } //ndk

        buildTypes {
            release {

            }
            debug {
                ndk.with {
                    debuggable = true //"NDK_DEBUG=1"
                }
            }
        } //buildTypes

        abis {
            if (!ndk_skipARM) {
                create("armeabi-v7a") {
                    ldFlags.addAll([
                            "-L${file("./obj/local/armeabi-v7a")}".toString()
//                                ,
//                                "-L${file("../../../ePub3/ThirdParty/icu4c/lib/armeabi-v7a")}".toString()
                    ])
                    cppFlags.add("-I${ndkDirIncludesASM_ARM}".toString())
                    cppFlags.add("-J6")
                    CFlags.add("-I${ndkDirIncludesASM_ARM}".toString())
                    CFlags.add("-J6")
                }
                create("arm64-v8a") {
                    ldFlags.addAll([
                            "-L${file("./obj/local/armeabi-v8a")}".toString()
//                                ,
//                                "-L${file("../../../ePub3/ThirdParty/icu4c/lib/armeabi-v7a")}".toString()
                    ])
                    cppFlags.add("-I${ndkDirIncludesASM_ARM64}".toString())
                    CFlags.add("-I${ndkDirIncludesASM_ARM64}".toString())
                }
            }

            if (!ndk_skipX86) {
                create("x86") {
                    ldFlags.addAll([
                            "-L${file("./obj/local/x86")}".toString()
//                                ,
//                                "-L${file("../../../ePub3/ThirdParty/icu4c/lib/x86")}".toString()
                    ])
                    cppFlags.add("-I${ndkDirIncludesASM_X86}".toString())
                    CFlags.add("-I${ndkDirIncludesASM_X86}".toString())
                }
                create("x86_64") {
                    ldFlags.addAll([
                            "-L${file("./obj/local/x86_64")}".toString()
//                                ,
//                                "-L${file("../../../ePub3/ThirdParty/icu4c/lib/x86")}".toString()
                    ])
                    cppFlags.add("-I${ndkDirIncludesASM_X86}".toString())
                    CFlags.add("-I${ndkDirIncludesASM_X86}".toString())
                }
            }
        } //abis

        productFlavors {
            if (!ndk_skipARM) {
                // create("armeabi-v7a") {
                //     ndk.with {
                //         abiFilters.add("armeabi-v7a")
                //     }
                // }
                // create("arm64-v8a") {
                //     ndk.with {
                //         abiFilters.add("arm64-v8a")
                //     }
                // }
                create("armeabi-v7a--arm64-v8a") {
                    ndk.with {
                        abiFilters.add("armeabi-v7a")
                        abiFilters.add("arm64-v8a")
                    }
                }
            }

            if (!ndk_skipX86) {
                // create("x86") {
                //     ndk.with {
                //         abiFilters.add("x86")
                //     }
                // }
                // create("x86_64") {
                //     ndk.with {
                //         abiFilters.add("x86_64")
                //     }
                // }
                create("x86--x86_64") {
                    ndk.with {
                        abiFilters.add("x86")
                        abiFilters.add("x86_64")
                    }
                }
            }

            if (!ndk_skipARM && !ndk_skipX86) {
                create("armeabi-v7a--arm64-v8a--x86--x86_64") {
                    ndk.with {
                        abiFilters.add("armeabi-v7a")
                        abiFilters.add("arm64-v8a")
                        abiFilters.add("x86")
                        abiFilters.add("x86_64")
                    }
                }
            }
        } //productFlavors
    } //android
} //model

// tasks.all { task ->
//     if (task.name.startsWith('compile') && task.name.endsWith('Ndk')) {
//         task.enabled = false
//     }
// }

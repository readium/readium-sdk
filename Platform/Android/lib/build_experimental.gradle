apply plugin: 'com.android.model.library'

def ndk_skipX86 = (rootProject.hasProperty("readium_ndk_skipX86") && rootProject.readium_ndk_skipX86)
def ndk_skipARM = (rootProject.hasProperty("readium_ndk_skipARM") && rootProject.readium_ndk_skipARM)
def ndk_clang = (rootProject.hasProperty("readium_ndk_clang") && rootProject.readium_ndk_clang)
def ndk_experimental = (rootProject.hasProperty("readium_ndk_experimental") && rootProject.readium_ndk_experimental)

def _buildTypes = []
def _productFlavors = []
def currentBuildType
model {
    android {
        compileSdkVersion = 28
        buildToolsVersion = "28.0.3"

        defaultConfig {

            // manifest@package attribute in src/main/AndroidManifest.xml
            // applicationId = "org.readium.sdk.android"

            // manifest/uses-sdk@android:minSdkVersion attribute in src/main/AndroidManifest.xml
            minSdkVersion.apiLevel = 19

            // manifest/uses-sdk@android:targetSdkVersion attribute in src/main/AndroidManifest.xml
            targetSdkVersion.apiLevel = 28

            // manifest@android:versionCode attribute in src/main/AndroidManifest.xml
            versionCode 31

            // manifest@android:versionName attribute in src/main/AndroidManifest.xml
            versionName "1.31"
        }

        sources {
            main {
                java {
                    source {
                        srcDirs = [ './src/main/java' ]
                    }
                }

                jniLibs {
                    dependencies {
                        project ":epub3"
                    }
                }
            }
        }

        buildTypes {
            debug {
                minifyEnabled = false
            }
            release {
                minifyEnabled = false
            }
        }

        productFlavors {
            if (!ndk_skipARM) {
                // create("armeabi-v7a") {
                //     ndk.with {
                //         abiFilters.add("armeabi-v7a")
                //     }
                // }
                // create("arm64-v8a") {
                //     ndk.with {
                //         abiFilters.add("arm64-v8a")
                //     }
                // }
                create("armeabi-v7a--arm64-v8a") {
                    ndk.with {
                        abiFilters.add("armeabi-v7a")
                        abiFilters.add("arm64-v8a")
                    }
                }
            }

            if (!ndk_skipX86) {
                // create("x86") {
                //     ndk.with {
                //         abiFilters.add("x86")
                //     }
                // }
                // create("x86_64") {
                //     ndk.with {
                //         abiFilters.add("x86_64")
                //     }
                // }
                create("x86--x86_64") {
                    ndk.with {
                        abiFilters.add("x86")
                        abiFilters.add("x86_64")
                    }
                }
            }

            if (!ndk_skipARM && !ndk_skipX86) {
                create("armeabi-v7a--arm64-v8a--x86--x86_64") {
                    ndk.with {
                        abiFilters.add("armeabi-v7a")
                        abiFilters.add("arm64-v8a")
                        abiFilters.add("x86")
                        abiFilters.add("x86_64")
                    }
                }
            }
        }
    }
    components.android {
        binaries.afterEach { binary ->
            println "[[${project.name}]] (LIB) components.android.binaries buildType: ${binary.getBuildType().name}"
            if (!_buildTypes.contains(binary.getBuildType().name)) {
                println "[[${project.name}]] (LIB) components.android.binaries buildType ADDED"
                _buildTypes += binary.getBuildType().name
            }

            binary.getProductFlavors().each { flavor ->
                println "  [[${project.name}]] (LIB) components.android.binaries productFlavor: ${flavor.name}"
                if (!_productFlavors.contains(flavor)) {
                    println "  [[${project.name}]] (LIB) components.android.binaries productFlavor ADDED"
                    _productFlavors += flavor
                }

                flavor.ndk.abiFilters.each { abiFilter ->
                    println "    [[${project.name}]] (LIB) components.android.binaries abiFilter (${abiFilter})"
                }
            }
            // binary.mergedNdkConfig.cppFlags.add("-DVARIANT=\"" + binary.name + "\"")
        }
    }
}

task copyLibs {
    doLast {
        println "[[${project.name}]] (LIB) Copy *.so *.aar (${currentBuildType})"

        _productFlavors.each { flavor ->
            println "  [[${project.name}]] (LIB) productFlavor (${flavor.name})"

            _buildTypes.each { buildType ->
                println "    [[${project.name}]] (LIB) buildType (${buildType})"

                if (currentBuildType == buildType) {

                    def srcDirPath_AAR = "${project.projectDir}/build/outputs/aar"
                    def dstDirPath_AAR = "${project.projectDir}/../dist/${buildType.toUpperCase()}"
                    copy {
                        from("${srcDirPath_AAR}") {
                            include("*-${flavor.name}-${buildType}.aar")
                        }
                        into("${dstDirPath_AAR}")
                    }

                    flavor.ndk.abiFilters.each { abiFilter ->
                        println "      [[${project.name}]] (LIB) abiFilter (${abiFilter})"

                        def srcDirPath_LIBS = "${project.projectDir}/../epub3/build/intermediates/binaries/${buildType}/${flavor.name}/lib/${abiFilter}"
                        def dstDirPath_LIBS = "${project.projectDir}/../epub3/jniLibs/${buildType.toUpperCase()}/${abiFilter}"

                        copy {
                            from("${srcDirPath_LIBS}") {
                                include("*.so")
                            }
                            into("${dstDirPath_LIBS}")
                        }
                    }
                }
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    println "[[${project.name}]] (LIB) TaskAdded: ${task.name} (${currentBuildType})"

    if (task.name.startsWith("assemble")) {
        task.finalizedBy copyLibs
    }
}
gradle.buildFinished { buildResult ->
    println "[[${project.name}]] (LIB) buildFinished (${currentBuildType})"
}

gradle.taskGraph.whenReady { taskGraph ->
    println "[[${project.name}]] (LIB) taskGraph ready"

    // taskGraph.getAllTasks().last().finalizedBy("copyLibs")
    // taskGraph.getAllTasks().last().doLast "copyLibs"
    taskGraph.getAllTasks().last().doLast {
        println "[[${project.name}]] (LIB) last TASK (${currentBuildType})"
    } // .dependsOn "copyLibs"

    if (taskGraph.hasTask(buildRelease)) {
        println "[[${project.name}]] (LIB) taskGraph RELEASE (build)"

        currentBuildType = "release"
    } else if (taskGraph.hasTask(buildDebug)) {
        println "[[${project.name}]] (LIB) taskGraph DEBUG (build)"

        currentBuildType = "debug"
    } else {
        if (taskGraph.hasTask(assembleRelease)) {
            println "[[${project.name}]] (LIB) taskGraph RELEASE (assemble)"

            currentBuildType = "release"
        }
        if (taskGraph.hasTask(assembleDebug)) {
            println "[[${project.name}]] (LIB) taskGraph DEBUG (assemble)"

            currentBuildType = "debug"
        }
    }
}

task buildRelease(type: GradleBuild, dependsOn: build) {
}

task buildDebug(type: GradleBuild, dependsOn: build) {
}

// task assembleRelease(type: GradleBuild, dependsOn: assemble) {
// }

// task assembleDebug(type: GradleBuild, dependsOn: assemble) {
// }

// tasks.all { task ->
//     if (task.name.startsWith('compile') && task.name.endsWith('Ndk')) {
//         task.enabled = false
//     }
// }
